First we need to create context using createContext() from react

then we have to create Provider which we hold all the data that you need to share between different  components.

then to access Context data there are mainly two ways:
1. static context [only for class based component]
2. Using consumer which takes callback [ for both ]
3. using useContext much cleaner then 2nd way. [implemented in lession9] : best thong about it is that we can use that as many times as we want
**********RECOMMENDED is 3rd way***************

so which to choose both are good but by using Conusmer we can convert Class -> Functional Component easily and we access multiple  context data but those things not possible in static context.

To update context:
define updating func in ContextProvider Class Component
create another component to change 
access that func in that component
and BOOM change the data

While working with multiple contexts
Order of wrapping context doesn't matter much
example
1.

<ThemeContextProvider>
    <AuthContextProvider>

        <Navbar />
        <BookList />
        <ThemeToggle />

    </AuthContextProvider>
</ThemeContextProvider>

2.

<AuthContextProvider>
    <ThemeContextProvider>

        <Navbar />
        <BookList />
        <ThemeToggle />

    </ThemeContextProvider>
</AuthContextProvider>

both are same.

To consume multiple contexts we have two ways
1. use 1 static context and rest Consumer context
2. use all Consumer contexts [ nexted ] -> next Consumer top of each other and destructure data of 
each context at the lowest Consumer

example

<AuthContext.Consumer>
                {(authContext) => (
                <ThemeContext.Consumer>
                    {(themeContext) => {
                    const { isAuthenticated } = authContext;
                    const { isLightTheme, light, dark } = themeContext;
                    const theme = isLightTheme ? light : dark;
                    return (
                        <nav style={{ background: theme.ui, color: theme.syntax }}>
                        <div>{isAuthenticated ? "Logged in" : "Logged out"}</div>
                        </nav>
                    );
                    }}
                </ThemeContext.Consumer>
                )}
</AuthContext.Consumer>


in lession9,
we have converted BookList class component to Functional component as used theme context using
useContext() hook.